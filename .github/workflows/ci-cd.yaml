name: Docker CI
on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up QEMU for multi-platform builds
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Pull latest Docker Image
      run: |
        # Pull the latest image from Docker Hub
        docker pull soubarniya/go-api:latest || echo "No existing latest image found, continuing..."

    - name: Build and Tag Docker Image
      id: build-image
      run: |
        # Get the current date in YYYYMMDD format for versioning
        VERSION=$(date +'%Y%m%d')

        # Tag the old image with the version if it exists
        if [[ $(docker images -q soubarniya/go-api:latest) ]]; then
          docker tag soubarniya/go-api:latest soubarniya/go-api:${VERSION}
          echo "Old image tagged as ${VERSION}."
        else
          echo "No latest image found to tag."
        fi

        # Build the new image with the latest tag
        docker build -t soubarniya/go-api:latest .

        # Output the version for later use
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    - name: Push Docker Image
      run: |
        # Push the latest image
        docker push soubarniya/go-api:latest

        # Check if the versioned image exists and push it
        if [[ $(docker images -q soubarniya/go-api:${{ env.VERSION }}) ]]; then
          echo "Pushing versioned image ${VERSION}."
          docker push soubarniya/go-api:${{ env.VERSION }}
        else
          echo "Versioned image ${VERSION} does not exist, skipping push."
        fi